AWSTemplateFormatVersion: '2010-09-09'
Description: 3-tier ECS Fargate app with ALB (FE/BE) and MySQL RDS

Parameters:
  ProjectName:
    Type: String
    Default: sh-3tier
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  FEImage:
    Type: String
    Description: Frontend container image (e.g., docker.io/user/fe:tag)
  BEImage:
    Type: String
    Description: Backend container image (e.g., docker.io/user/be:tag)
  DBUsername:
    Type: String
    Default: appuser
  DBPassword:
    Type: String
    NoEcho: true
  DBName:
    Type: String
    Default: sh-3-tier-rds

Resources:
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  FeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FE tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  BeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BE tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  DbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS MySQL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BeSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub '${ProjectName}-exec-role'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub '${ProjectName}-task-role'

  FeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}/fe'
      RetentionInDays: 14

  BeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}/be'
      RetentionInDays: 14

  # RDS
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub '${ProjectName} DB subnets'
      SubnetIds: !Ref PrivateSubnets
      DBSubnetGroupName: !Sub '${ProjectName}-db-subnets'

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-mysql'
      Engine: mysql
      EngineVersion: '8.0'
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      PubliclyAccessible: false
      MultiAZ: false
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Sub '${DBName}'
      VPCSecurityGroups: [ !Ref DbSG ]
      DBSubnetGroupName: !Ref DbSubnetGroup
      DeletionProtection: false
    DeletionPolicy: Delete

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnets
      SecurityGroups: [ !Ref AlbSG ]

  TGF:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-fe-tg'
      TargetType: ip
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      Matcher:
        HttpCode: '200-399'

  TGB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-be-tg'
      TargetType: ip
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 5000
      HealthCheckProtocol: HTTP
      HealthCheckPath: /api/health
      Matcher:
        HttpCode: '200-399'

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TGF

  ApiRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values: [ "/api/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TGB

  FeTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-fe'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn: !GetAtt ExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FEImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FeLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fe

  BeTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-be'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn: !GetAtt ExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BEImage
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: DB_HOST
              Value: !GetAtt DB.Endpoint.Address
            - Name: DB_USER
              Value: !Ref DBUsername
            - Name: DB_PASS
              Value: !Ref DBPassword
            - Name: DB_NAME
              Value: !Ref DBName
          HealthCheck:
            Command: [ "CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1" ]
            Interval: 30
            Retries: 3
            StartPeriod: 15
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BeLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: be

  FeService:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref FeTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups: [ !Ref FeSG ]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref TGF

  BeService:
    Type: AWS::ECS::Service
    DependsOn: ApiRule
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref BeTask
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups: [ !Ref BeSG ]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 5000
          TargetGroupArn: !Ref TGB

Outputs:
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
    Description: Public URL for the app
